print("Sahil")
2+5
v <- (1,2,3,4)
v <- c(1,2,3,4)
v
getwd()
getwd()
print("Second Line")
print("First Line")
print("Second Line")
print("First Line")
print("Second Line")
print("First Line")
print("Second Line")
source('~/demo.R')
source('~/demo.R')
install.packages('rvest')
source('~/.active-rstudio-document')
demo(package = 'rvest',topic = 'tripadvisor')
source('~/.active-rstudio-document')
install.packages("rvest")
library(rvest)
demo(package = 'rvest')
demo(package = 'rvest',topic = 'zillow')
install.packages('tidyr')
source('~/.active-rstudio-document')
demo(package = 'rvest',topic = 'zillow')
source('~/Desktop/R-Programming/logicalOperator.R')
source('~/Desktop/R-Programming/logicalOperator.R')
df[df$mpg>20,]
print(df[df$mpg>20],cyl)
print(df[df$mpg>20],df$cyl)
print(df[df$mpg>20],'cyl')
print(df[df$mpg>20,df$cyl])
print(df[df$mpg>20,df$cyl])
print(subset(df,mpg > 20))
print(df[(df$mpg>20) & (df$hp>100) ,])
source('~/Desktop/R-Programming/if_else_elseif.R')
number <- 5
if(number==4){
print("x is not equal to 5")
}
number <- 5
source('~/Desktop/R-Programming/if_else_elseif.R')
if(number==4){
print("x is not equal to 5")
}
source('~/Desktop/R-Programming/if_else_elseif.R')
source('~/Desktop/R-Programming/if_else_elseif.R')
source('~/Desktop/R-Programming/if_else_elseif.R')
source('~/Desktop/R-Programming/if_else_elseif.R')
source('~/Desktop/R-Programming/if_else_elseif.R')
source('~/Desktop/R-Programming/if_else_elseif.R')
source('~/Desktop/R-Programming/if_else_elseif.R')
source('~/Desktop/R-Programming/if_else_elseif.R')
source('~/Desktop/R-Programming/if_else_elseif.R')
source('~/Desktop/R-Programming/if_else_elseif.R')
source('~/Desktop/R-Programming/if_else_elseif.R')
source('~/Desktop/R-Programming/if_else_elseif.R')
source('~/Desktop/R-Programming/if_else_elseif.R')
source('~/Desktop/R-Programming/if_else_elseif.R')
source('~/Desktop/R-Programming/if_else_elseif.R')
source('~/Desktop/R-Programming/if_else_elseif.R')
source('~/Desktop/R-Programming/if_else_elseif.R')
source('~/Desktop/R-Programming/if_else_elseif.R')
source('~/Desktop/R-Programming/if_else_elseif.R')
source('~/Desktop/R-Programming/if_else_elseif.R')
source('~/Desktop/R-Programming/if_else_elseif.R')
source('~/Desktop/R-Programming/if_else_elseif.R')
source('~/Desktop/R-Programming/if_else_elseif.R')
source('~/Desktop/R-Programming/if_else_elseif.R')
source('~/Desktop/R-Programming/if_else_elseif.R')
source('~/Desktop/R-Programming/if_else_elseif.R')
source('~/Desktop/R-Programming/if_else_elseif.R')
source('~/Desktop/R-Programming/if_else_elseif.R')
source('~/Desktop/R-Programming/if_else_elseif.R')
source('~/Desktop/R-Programming/if_else_elseif.R')
source('~/Desktop/R-Programming/if_else_elseif.R')
source('~/Desktop/R-Programming/if_else_elseif.R')
source('~/Desktop/R-Programming/if_else_elseif.R')
source('~/Desktop/R-Programming/conditionalStatementExercise.R')
source('~/Desktop/R-Programming/conditionalStatementExercise.R')
source('~/Desktop/R-Programming/conditionalStatementExercise.R')
source('~/Desktop/R-Programming/conditionalStatementExercise.R')
source('~/Desktop/R-Programming/conditionalStatementExercise.R')
source('~/Desktop/R-Programming/conditionalStatementExercise.R')
source('~/Desktop/R-Programming/conditionalStatementExercise.R')
source('~/Desktop/R-Programming/conditionalStatementExercise.R')
source('~/Desktop/R-Programming/conditionalStatementExercise.R')
source('~/Desktop/R-Programming/conditionalStatementExercise.R')
source('~/Desktop/R-Programming/conditionalStatementExercise.R')
class(var)
var <- integer(prompt = "Enter the number : ")
var <- int(prompt = "Enter the number : ")
var <- (prompt = "Enter the number : ")
class(var)
int.var = as.integer(var)
var <- readline(prompt = "Enter the number : ")
int.var = as.integer(var)
class(var)
class(int.var)
source('~/Desktop/R-Programming/conditionalStatementExercise.R')
source('~/Desktop/R-Programming/conditionalStatementExercise.R')
source('~/Desktop/R-Programming/conditionalStatementExercise.R')
matrix <- matrix((1:10), nrow =2, ncol = 5,byrow = T)
print(matrix())
print(matrix)
source('~/Desktop/R-Programming/conditionalStatementExercise.R')
x<-c(1,24,3)
print(x[1])
print(x[2])
x<-c(1,24,3)
if((x[1]>x[2])& (x[1]>x[3])){
print(x[1])
}else if((x[2]>x[1])& (x[2]>x[3])){
print(x[2])
}else{
print(x[3])
source('~/Desktop/R-Programming/conditionalStatementExercise.R')
source('~/Desktop/R-Programming/conditionalStatementExercise.R')
source('~/Desktop/R-Programming/conditionalStatementExercise.R')
source('~/Desktop/R-Programming/conditionalStatementExercise.R')
x<-c(1,24,3)
largest <- function(x)
{
if((x[1]>x[2])& (x[1]>x[3])){
print(x[1])
}else if((x[2]>x[1])& (x[2]>x[3])){
print(x[2])
}else{
print(x[3])
}
}
print(largest(x))
largest <- function(x)
{
if((x[1]>x[2])& (x[1]>x[3])){
#print(x[1])
return (x[1])
}else if((x[2]>x[1])& (x[2]>x[3])){
#print(x[2])
return (x[2])
}else{
#print(x[3])
return(x[3])
}
}
print(largest(x))
print(x[1])
source('~/Desktop/R-Programming/conditionalStatementExercise2.R')
source('~/Desktop/R-Programming/conditionalStatementExercise2.R')
source('~/Desktop/R-Programming/conditionalStatementExercise2.R')
source('~/Desktop/R-Programming/conditionalStatementExercise2.R')
source('~/Desktop/R-Programming/conditionalStatementExercise2.R', echo=TRUE)
source('~/Desktop/R-Programming/conditionalStatementExercise2.R')
print(x[3])
x<-c(1,24,3)
if((x[1]>x[2])& (x[1]>x[3])){
print(x[1])
}else if((x[2]>x[1])& (x[2]>x[3])){
print(x[2])
}else{
print(x[3])
}
source('~/Desktop/R-Programming/conditionalStatementExercise2.R')
source('~/Desktop/R-Programming/conditionalStatementExercise2.R')
source('~/Desktop/R-Programming/conditionalStatementExercise.R')
source('~/Desktop/R-Programming/conditionalStatementExercise.R')
source('~/Desktop/R-Programming/conditionalStatementExercise.R')
source('~/Desktop/R-Programming/conditionalStatementExercise.R')
source('~/Desktop/R-Programming/conditionalStatementExercise.R')
source('~/Desktop/R-Programming/conditionalStatementExercise.R')
source('~/Desktop/R-Programming/conditionalStatementExercise.R')
source('~/Desktop/R-Programming/conditionalStatementExercise.R')
var <- 2
if(var ==1 ){
print("Hello")
}else{
print("")
}
var <- readline(prompt = "Enter the number : ")
int.var = as.integer(var)
class(var)
class(int.var)
print(paste("The number you have entered is :",int.var))
if(int.var%%2==0){
print("The number is even")
}else{
print("The number is odd")
}
matrix <- matrix((1:10), nrow =2, ncol = 5,byrow = T)
print(matrix)
if(is.matrix(matrix)){
print("Yes it is ")
}else{
print("No it is not")
}
source('~/Desktop/R-Programming/conditionalStatementExercise.R')
source('~/Desktop/R-Programming/conditionalStatementExercise.R')
4
source('~/Desktop/R-Programming/conditionalStatementExercise.R')
source('~/Desktop/R-Programming/logicalOperator.R')
source('~/Desktop/R-Programming/conditionalStatementExercise.R')
source('~/Desktop/R-Programming/conditionalStatementExercise2.R')
source('~/Desktop/R-Programming/conditionalStatementExercise2.R')
source('~/Desktop/R-Programming/conditionalStatementExercise2.R')
source('~/Desktop/R-Programming/StasticalProgramming-R/Advanced-R-Programming/pipe_operator_Dplyr.R')
source('~/Desktop/R-Programming/StasticalProgramming-R/Advanced-R-Programming/pipe_operator_Dplyr.R')
result <- arrange(sample_n(filter(data,mpg>20),size = 5),desc(mpg))
result
source('~/Desktop/R-Programming/StasticalProgramming-R/Advanced-R-Programming/pipe_operator_Dplyr.R')
source('~/Desktop/R-Programming/StasticalProgramming-R/Advanced-R-Programming/pipe_operator_Dplyr.R')
source('~/Desktop/R-Programming/StasticalProgramming-R/Advanced-R-Programming/pipe_operator_Dplyr.R', echo=TRUE)
source('~/Desktop/R-Programming/StasticalProgramming-R/Advanced-R-Programming/pipe_operator_Dplyr.R', echo=TRUE)
source('~/Desktop/R-Programming/StasticalProgramming-R/Advanced-R-Programming/pipe_operator_Dplyr.R', echo=TRUE)
source('~/Desktop/R-Programming/StasticalProgramming-R/Advanced-R-Programming/pipe_operator_Dplyr.R', echo=TRUE)
result3 <- df %>% filter(mpg>20) %>% sample_n(size = 5) %>% arrange(desc(mpg))
result3
library(dplyr)
data <- mtcars
head(data)
filteredCars = filter(data,(mpg>20 & cyl==6))
filteredCars
count(filteredCars)
orderedDataframe <- arrange(data,cyl,desc(wt))
orderedDataframe
select(data,mpg,hp)
distinctData <- distinct(data,gear)
distinctData
newcolumnData = mutate(data,Performance=hp/wt)
newcolumnData
meanValue <- summarise(data,mean(mpg))
meanValue
meanHP = data %>% mean(hp) %>% filter(cyl==6)
meanHP = data %>% summarise(mean(hp)) %>% filter(cyl==6)
meanHP = data %>% filter(cyl==6)  %>% summarise(mean(hp))
source('~/Dplyr_Exercise.R', echo=TRUE)
library(ggplot2)
library(dplyr)
library(plotly)
#Read the data
data <- read.csv('/Users/sahilnagpal/Desktop/R-Programming/R-Course-HTML-Notes/R-for-Data-Science-and-Machine-Learning/Training Exercises/Capstone and Data Viz Projects/Capstone Project/Batting.csv')
data
#columns present in data
colnames(data)
#head the data
head(data)
#geeting a single column
data$teamID
cls
clear
#geeting a single column
data$teamID
data$yearID
data[,'teamID']
getwd()
source('~/Untitled.R', echo=TRUE)
print("Hello Sahil")
varibale <- 100
print(varibale)
typeof(varibale)
varibale <- 100.0
typeof(varibale)
as.integer(varibale)
typeof(varibale)
varibale <- as.integer(varibale)
typeof(varibale)
data <- read.csv(file.choose())
while(FALSE){
print("hello")
}
source('~/.active-rstudio-document', echo=TRUE)
print("Sahil")
print("Sahil")
source('~/.active-rstudio-document', echo=TRUE)
print("Sahil")
while(TRUE){
print("abc")
}
number <- 1
while(number<12){
print(number)
number <- number+1
}
for(i in 1:5){
print("hello")
}
1:5
sahil <- [1,2,3,4]
sahil <- (1,2,3,4)
sahil <- c(1,2,3,4)
typeof(sahil)
sahil <- c[1,2,3]
sahil <- c(1,2,3)
data <- c("East","West","East","North","North","East","West","West","West","East","North")
data
is.factor(data)
new_data = as.factor(data)
rm(new_data)
factor.data = factor(data)
new.data = as.factor(data)
print(new.data)
print(levels(data))
print(levels(new.data))
print(levels(factor.data))
file.data <- read.csv(file.choose())
summary(new.data)
?rnorm()
?factor
library(ggplot2)
install.packages('ggplot2')
install.packages("ggplot2")
?ggplot()
?ggplot2()
library(ggplot2)
?ggplot()
qplot(data = diamonds,carat , price ,color = clarity , factes = .~clarity)
qplot(data = diamonds,carat , price ,color = clarity , facets = .~clarity)
profit <- (expenses - revenue)
profit <- (expenses - revenue)
#Data
revenue <- c(14574.49, 7606.46, 8611.41, 9175.41, 8058.65, 8105.44, 11496.28, 9766.09, 10305.32, 14379.96, 10713.97, 15433.50)
expenses <- c(12051.82, 5695.07, 12319.20, 12089.72, 8658.57, 840.20, 3285.73, 5821.12, 6976.93, 16618.61, 10054.37, 3803.96)
profit <- (expenses - revenue)
print(profit)
print(sum(profit))
summary(revenue)
print(length(revenue))
#Data
revenue <- c(14574.49, 7606.46, 8611.41, 9175.41, 8058.65, 8105.44, 11496.28, 9766.09, 10305.32, 14379.96, 10713.97, 15433.50)
tax.revenue <- revenue * 0.30
tax.profit <- (expenses - tax.revenue)
print(sum(tax.profit))
vec <- c(1,2,3,4)
print(sum(vec))
rm(vec)
tax.profit.sum <- sum(tax.profit)
print(sum(profit))
print(sum(revenue))
print(sum(expenses))
print(sum(revenue))
print(sum(expenses))
profit <- (revenue - expenses)
print(sum(profit))
tax.profit2 <- (tax.revenue - expenses)
tax.profit.sum2 <- sum(tax.profit2)
#Data
revenue <- c(14574.49, 7606.46, 8611.41, 9175.41, 8058.65, 8105.44, 11496.28, 9766.09, 10305.32, 14379.96, 10713.97, 15433.50)
expenses <- c(12051.82, 5695.07, 12319.20, 12089.72, 8658.57, 840.20, 3285.73, 5821.12, 6976.93, 16618.61, 10054.37, 3803.96)
total.revenue <- sum(revenue)
total.expenses <- sum(expenses)
profit.month <- (revenue - expenses)
priint(profit.month)
print(profit.month)
tax.revenue <- revenue * 0.30
tprofit.with.tax <- (tax.revenue - expenses)
profit.with.tax <- (tax.revenue - expenses)
rm(tprofit.with.tax)
sum(profit.with.tax)
profit.tax.mean <- mean(profit.with.tax)
print(profit.tax.mean)
good.months <- [profit.with.tax>profit.tax.mean]
good.months <- profit.with.tax>profit.tax.mean
good.months
good.months <- which(profit.with.tax>profit.tax.mean)
good.months
profit.with.tax[good.months]
profit.with.tax
actual.good.month <- profit.with.tax[good.months]
bad.months <- which(profit.with.tax<profit.tax.mean)
actual.bad.month <- profit.with.tax[bad.months]
actual.bad.month
#answer-5
best.month <- max(actual.good.month)
best.month
#answer-5
best.month <- which(max(actual.good.month))
#answer-5
best.month <- which.max(actual.good.month)
best.month
worst.month <- which.min(actual.bad.month)
worst.month <- which(actual.bad.month)
worst.month <- min(actual.bad.month)
worst.month <- max(actual.bad.month)
worst.month <- which.max(actual.bad.month)
print(profit.month)
tax <- round(revenue * 0.3 , digits = 2)
profit.after.tax <- (profit - tax)
profit <- (revenue - expenses)
profit.after.tax <- (profit - tax)
profit.after.tax
tax <- round(profit * 0.3 , digits = 2)
profit.after.tax <- (profit - tax)
profit.after.tax
profit.margin <- profit.after.tax/revenue
profit.margin
profit.margin <- round(profit.after.tax/revenue,2)*100
profit.margin
#answer-4
mean.pat <- mean(profit.after.tax)
mean.pat
good.months <- which(profit.after.tax>mean.pat)
good.months
bad.months <- !good.months
bad.months
bad.months <- which(!good.months)
bad.months
bad.months <- which(profit.after.tax<mean.pat)
bad.months
#answer-5
best.month <- max(profit.after.tax)
best.month
#answer-5
best.month <- profit.after.tax == max(profit.after.tax)
best.month
worst.month <- profit.after.tax == min(profit.after.tax)
worst.month
#to find out best month
best.month <- max(profit.after.tax)
best.month
#to find out worst month
worst.month <- min(profit.after.tax)
worst.month
profit.after.tax
ssh -i "testKeyPair.pem" ec2-user@ec2-3-17-138-66.us-east-2.compute.amazonaws.com
ls
ls
setwd('/Users/sahilnagpal/Desktop/R-Programming/StasticalProgramming-R/Vectors/')
ls
source('~/Desktop/R-Programming/StasticalProgramming-R/Vectors/R-Course-Practical.R', echo=TRUE)
source('~/Desktop/R-Programming/StasticalProgramming-R/Vectors/R-Course-Practical.R', echo=TRUE)
print(students[1])
print(student[3])
print(students[3])
print(students[-2])
final <- c(78,84,95,82,91)
print(midterm+final)
midterm
final
#Average
print(midterm+final/2)
#Average
print((midterm+final)/2)
course.grade <- 0.4*midterm + 0.6*final
course.grade
print(midterm>final)
print(which(midterm>final))
midterm
final
print(which(final>midterm))
print((final>midterm))
#to select the index we used
which(final>midterm)
#performing the boolean opertion
(midterm>final) & (midterm>80)
which(midterm>final) & (midterm>80))
which((midterm>final) & (midterm>80))
#sum
sum(final)
#mean
mean(final)
#median
median(final)
#max
max(final)
#min
min(final)
#standard deviation
sd(final)
#variance
var(final)
#length - tells about the number of elements in a vector
length(final)
#sort
sort(final)
#unique
unique(final)
#summary
summary(final)
##########Refrencing the elements##############
students[c(2,4)]
final[c(1,2)]
#vector of negative indices
students[c(-1,-3)]
threshold.value <- 90
course.grade>= threshold.value
which(course.grade>= threshold.value)
student.score <- which(course.grade>= threshold.value)
students[student.score]
getwd()
